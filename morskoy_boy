class BoardException(Exception):
    pass

class BadBoard_(Exception):
    pass

class WrongShipPlacement(Exception):
    pass

class DotOutOfBoardError(BoardException):
    def __str__(self):
        return "Клетка не в поле"

class BoardUsedException(BoardException):
    def __str__(self):
        return "Вы уже стреляли в эту клетку"



class Dot:
    def __init__(self, x, y):
        self.x = self.dot_checker(x)
        self.y = self.dot_checker(y)

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f'{self.x} : {self.y}  '

    def dot_checker(self, coordinate):
        if 1 <= coordinate <= 6:
            return coordinate
        else:
            raise DotOutOfBoardError

class Ship:
    def __init__(self, length):
        self.length = length
        self.dots_list = None
        self.direction = None
        # self.lives = 1

    def __str__(self):
        dt_lst = []
        if self.dots_list is not None:
            for i in self.dots_list:
                dt_lst.append((i.x, i.y))
        else:
            dt_lst = "Empty"

        if self.direction is not None:
            direc = self.direction
        else:
            direc = "Empty"
        return f'Длина корабля - {self.length}, направление: {direc}, координаты: {dt_lst}'

    def dots_setting(self, a, b, c):
        head = Dot(b, c)
        ship_dots_list = []
        from random import randrange
        toss = randrange(-1, 2, 2)
        for i in range(self.length):
            if a == 1:
                self.direction = 'horizontal'
                new_dot = Dot(head.x, head.y + i*toss)
            elif a == 2:
                self.direction = 'vertical'
                new_dot = Dot(head.x + i*toss, head.y)
            ship_dots_list.append(new_dot)
        self.dots_list = ship_dots_list

class Board:
    def __init__(self, board_num=0):
        self.field = [['  | 1 | 2 | 3 | 4 | 5 | 6 |'],
                      ['О', 'О', 'О', 'О', 'О', 'О'],
                      ['О', 'О', 'О', 'О', 'О', 'О'],
                      ['О', 'О', 'О', 'О', 'О', 'О'],
                      ['О', 'О', 'О', 'О', 'О', 'О'],
                      ['О', 'О', 'О', 'О', 'О', 'О'],
                      ['О', 'О', 'О', 'О', 'О', 'О']]
        self.board_num = board_num
        self.ships_list = self.ships_list_initial()
        self.occupied_fields = []
        # self.ships_alive = 10

    def ships_list_initial(self):
        k = [3, 2, 2, 1, 1, 1, 1]
        sh_list = []
        for i in k:
            sh_list.append(Ship(i))
        return sh_list

    def create_random_positions(self):
        from random import randrange
        for ship in self.ships_list:
            coun = 0
            while True:
                try:
                    coun += 1
                    if coun > 10000:
                        raise BadBoard_
                    a, b, c = randrange(1, 3), randrange(1, 7), randrange(1, 7)
                    ship.dots_setting(a, b, c)
                    for d in ship.dots_list:
                        if d in self.occupied_fields:
                            raise WrongShipPlacement
                        else:
                            pass
                    self.contour(ship)
                    break
                except:
                    continue

    def contour(self, vessel):
        for dot in vessel.dots_list:
            if self.board_num == 1:
                self.field[dot.x][dot.y - 1] = '■'
            else:
                pass
            self.occupied_fields.append(dot)
        for dot in vessel.dots_list:
            for gorizont in range(-1, 2):
                for vertical in range(-1, 2):
                    try:
                        dot_nearby = Dot(dot.x + gorizont, dot.y + vertical)
                        if dot_nearby not in self.occupied_fields:
                            self.occupied_fields.append(dot_nearby)
                            # self.field[dot_nearby.x][dot_nearby.y - 1] = 'x'
                        else:
                            pass
                    except:
                        pass

    #     print('f', *self.occupied_fields)

    def print_board(self):
        print(f'Доска номер {self.board_num}:')
        for index, item in enumerate(self.field):
            if index == 0:
                print(*self.field[index])
            else:
                print(index, '|', ' | '.join(self.field[index]), '|')

    #
    # def shot(self):
    #     try:


# class Player:
#
#     def __init__(self):
#         self.board_own
#         self.board_opponent
#
#     def ask(self):
#
#     def move(self):
#         while True:
#             ask()
#             try:
#                 Board.shot()
#             except:
#                 continue
#
#             if __ in __:
#                 return True
#
# class User(Player):
#
#     def ask(self):
#         try:
#             x, y = input("Введите номер строки и столбца через пробел")
#             x, y = int(x), int(y)
#         except:
#             print("Введите только номер строки и столбца через пробел")
#         if


# class AI(Player):


class Game:

    def __init__(self):
        pass

    def random_board(self):
        board_1, board_2 = Board(1), Board(2)

        board_1.create_random_positions()
        board_2.create_random_positions()
        board_1.print_board()
        board_2.print_board()


g = Game()
g.random_board()
